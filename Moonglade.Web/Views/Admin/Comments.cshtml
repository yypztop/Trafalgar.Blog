@{
    Layout = "_LayoutAdmin";
}

@model X.PagedList.StaticPagedList<Moonglade.Comments.CommentDetailedItem>
@using Moonglade.Utils
@using X.PagedList.Mvc.Core
@using X.PagedList.Mvc.Core.Common
@inject ITZoneResolver TZoneResolver

@Html.AntiForgeryToken()

@section scripts{
    <script>
        $(function () {
            $(".btn-delete").click(function () {
                var cid = $(this).data("commentid");
                callApi('/api/comment/delete', 'DELETE', [cid],
                    (success) => {
                        $(`#panel-comment-${cid}`).slideUp();
                    });
            });

            $(".btn-reply").click(function () {
                var cid = $(this).data("commentid");
                $(`#panel-comment-${cid} .reply-ui`).show();
            });

            $(".btn-reply-post").click(function () {
                var cid = $(this).data("commentid");
                var replyContent = $(`#replycontent-${cid}`).val();

                callApi('/api/comment/reply', 'POST',
                    {
                        commentId: cid,
                        replyContent: replyContent
                    },
                    async (resp) => {
                        var data = await resp.json();
                        $(`#panel-comment-${data.commentId} .reply-ui`).slideUp();
                        $(`#panel-comment-${data.commentId} .reply-list`).prepend(
                            `<hr /><div class="reply-container"><div><strong>Reply</strong><span class="pull-right text-muted">${data.replyTimeUtc
                            }</span></div><p>${data.replyContentHtml}</p></div>`);
                    });
            });

            $(".btn-approve").click(function () {
                callApi(`/api/comment/set-approval-status/${$(this).data("commentid")}`, 'POST', {},
                    async (resp) => {
                        var data = await resp.json();
                        $(`#panel-comment-${data} .btn-approve`).toggleClass('btn-outline-success');
                        $(`#panel-comment-${data} .btn-approve`).toggleClass('btn-success');
                    });
            });
        });
    </script>
}

@section head{
    <style>
        .mdrendered-comment-content img {
            max-width: 720px;
        }

        .reply-container {
            padding-left: 10px;
            border-left: 4px solid #CECECE;
        }
    </style>
}

<h3>
    @Localizer["Comments"]
    <a href="javascript:deleteSelectedComments();" class="btn btn-outline-danger btn-delete-selected float-right">
        <span class="icon-bin"></span> @Localizer["Delete Selected"]
    </a>
</h3>
<hr />

@if (Model.Count == 0)
{
    <div class="alert alert-info">
        @Localizer["No Comments"]
    </div>
}
else
{
    foreach (var item in Model)
    {
        <div id="panel-comment-@item.Id" class="card mb-4">
            <div class="card-body">
                <div class="float-right">
                    <div class="custom-control custom-checkbox mb-2 text-right">
                        <input type="checkbox" class="custom-control-input chk-cid" id="comment-item-chk-@item.Id" data-cid="@item.Id" />
                        <label class="custom-control-label" for="comment-item-chk-@item.Id"></label>
                    </div>

                    <a href="javascript:;" class="btn btn-sm @(item.IsApproved ? "btn-success" : "btn-outline-success") btn-approve" data-commentid="@item.Id">
                        <span class="icon-star-full"></span>
                    </a>
                    <button class="btn btn-sm btn-outline-accent btn-reply" data-commentid="@item.Id">
                        <span class="icon-undo2"></span>
                    </button>
                    <button class="btn btn-sm btn-outline-danger btn-delete" data-commentid="@item.Id">
                        <span class="icon-bin"></span>
                    </button>
                </div>

                <h6>
                    @item.Username
                    @if (!string.IsNullOrWhiteSpace(item.Email))
                    {
                        <text>
                            (<a href="mailto:@item.Email" class="d-none d-sm-inline">@item.Email</a>)
                        </text>
                    }
                </h6>
                <div class="mdrendered-comment-content">
                    @Html.Raw(ContentProcessor.MarkdownToContent(item.CommentContent, ContentProcessor.MarkdownConvertType.Html))
                </div>
                <div class="text-muted">
                    @item.PostTitle
                </div>

                <small class="text-muted">
                    <span>@TZoneResolver.ToTimeZone(item.CreateTimeUtc).ToString("yyyy-MM-dd HH:mm")</span> <span class="text-muted d-none d-sm-inline">(@item.IpAddress)</span>
                </small>

                <div class="reply-ui mt-3" style="display: none;">
                    <form>
                        <div class="form-group">
                            <textarea class="form-control"
                                      id="replycontent-@item.Id"
                                      name="ReplyContent"
                                      placeholder="Content" type="text"></textarea>
                        </div>

                        <a class="btn btn-success btn-reply-post" href="#" data-commentid="@item.Id">
                            @Localizer["Reply"]
                        </a>
                    </form>
                </div>
                <div class="reply-list">
                    @foreach (var reply in item.CommentReplies.OrderByDescending(t => t.ReplyTimeUtc))
                    {
                        <hr />
                        <div class="reply-container">
                            <div>
                                @Html.Raw(ContentProcessor.MarkdownToContent(reply.ReplyContent, ContentProcessor.MarkdownConvertType.Html))
                            </div>
                            <small class="text-muted">@TZoneResolver.ToTimeZone(reply.ReplyTimeUtc)</small>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
}

@Html.PagedListPager(Model, page => $"?page={page}", new PagedListRenderOptions
{
    LiElementClasses = new[] { "page-item" },
    PageClasses = new[] { "page-link" },
    UlElementClasses = new[] { "pagination justify-content-end" },
    DisplayEllipsesWhenNotShowingAllPageNumbers = false
})